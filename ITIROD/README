1. helloWorld. Создать 2 класса, в двух различных пакетах. Скомпилировать в консоли, запустить из-под консоли.


2. containers.
Создать класс для представления матрицы. Добавить операцию перемножения матриц. Проверить работоспособность на нулевой, единичной и произвольной квадратной матрице 4x4 (т.е. перемножить нулевую на нулевую, нулевую на единичную... и проверить результаты вручную или с помощью тестов). Данные в матрице в учебных целях хранить в ArrayList и LinkedList(т.е. создать 2 типа матриц или 2 различных реализации матриц). Сравнить производительность для различных списка (ArrayList и LinkedList) при перемножении матриц 100x100. Обосновать вывод.


3. strings-io[4]
а. Написать класс, который считывает произвольный текстовый файл и выводит статистику использования букв (a - 0.03%, b - 0.14% ,...).
b. Для матриц написать сохранение и чтение в текстовый файл, используя Reader и Writer
с. Для матриц написать сериализацию и десериализацию (ObjectInputStream ObjectOutputStream).


4. threads
Написать эмулятор системы массового обслуживания. Имеется банк с P счетами, N кассирам, M клиентами. Клиент может снимать/лодить деньги с любого из P счёта. Использовать многопоточность и средства синхронизации Java. Написать демона-наблюдателя, который следит за тем, что всё в порядке (что на счетах и в кошельках клиентов сумма > 0, что текущая денежная масса постоянна -- нет утечек).


5. jdbc [4]
Создать простейшую таблицу (4 поля), и для неё написать объект (domain object). Для объекта написать высокоуровневые CRUD-операции добавления (INSERT), сохранения (UPDATE), удаления (DELETE), и чтения (SELECT) из таблицы (dao -- data access object).  Т.е.
Student s = new Student();
s.setName("Petrov");
IStudentDAO sdao = new StudentDAO();
sdao.save(s);


6. написать junit-тесты к л/р 2,3,4, которые автоматически проверяли бы корректность отработки данных классов. Соответсвующие классы, возможно, нужно модифицировать, чтобы они исполнялись как в рабочем окружении (production), так и в тестовом. У всех классов должно быть журналирование Log4j.


7. Использовать инструмент ant для сборки проектов в лр.6 (готовых .jar-файлов); причём перед сборкой должны автоматически прогоняться junit тесты, для проверки корректности сборки. В сборку (jar-файл), тестовые классы не должны входить.
 

8. hello-servlet [4]
Простейший сервлет и html-форма к нему, так чтобы выполнялись предыдущие операции с JDBC с объектом. Вывести список объектов.
 

9. jsp-guest book [4]
a. Написание простейшей гостевой книги или выполнение предыдущей лр с помощью jsp и пользовательских тегов (минимум двух), вроде <my:iterator> и <my:renderObject/>. Эти теги нужно реализовать декларативно (/WEB-INF/tags/*.tag)
b. Реализовать других тега (возможно эти же два, только обязательно, чтобы они взаимодействовали), причём они должны быть реализованы программно, т.к. как TagHandler'ы, у которых имеется соответствующая библиотека тего (taglib).


10. xml-xslt [4]
Написать сохранение/чтение объекта с помощью DOM и SAX. Все объекты хранятся в БД, используются наработки предыдущих лр. Во всех вариантах лр использовать временные файлы запрещено.
a. Написать сервлет, который выдаёт список объектов в форме XML (/output/xml)
b. Написать фильтр, который используя XSLT-преобразование, используя вывод предыдущего сервлета преобразует его в HTML-вид, читаемый для пользователя (/output/html)
c. Написать форму для заргузки  XML-файла со списком объектов и соответствующий сервлет для вставки этих объектов из XML-файла в БД.
